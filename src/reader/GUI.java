/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package reader;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import ln.Book;
import ln.Chara;
import mainm.MainMenu;


/**
 *
 * @author HexxTheSwagger
 */
public class GUI extends javax.swing.JFrame {

    Reader lnReader;
    State currentState;
    String lastBckg;
    
    boolean isOver;
    
    /**
     * Creates new form GUI
     */
    public GUI(Reader lnReader, String lnPath, Book ln) {
        this.lnReader = lnReader;
        isOver = false;
        
        initComponents();
        initComponents_MANUALY_GOD_DAMNIT_NETBEANS(lnPath, ln);
        
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Layers = new javax.swing.JLayeredPane();
        Default_Buttons = new javax.swing.JLayeredPane();
        Button_Hide = new javax.swing.JToggleButton();
        Button_Exit = new javax.swing.JToggleButton();
        Button_Continue = new javax.swing.JButton();
        NarrationArea_SP = new javax.swing.JScrollPane();
        Narration_Area = new javax.swing.JTextPane();
        Mask_Narration = new javax.swing.JLabel();
        Actor_Area = new javax.swing.JLabel();
        TextArea_SP = new javax.swing.JScrollPane();
        Text_Area = new javax.swing.JTextArea();
        Masks_Default = new javax.swing.JLayeredPane();
        Mask_Top = new javax.swing.JLabel();
        Mask_Bottom = new javax.swing.JLabel();
        Characters = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();
        BlackOrWhite = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1600, 900));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        setSize(new java.awt.Dimension(1152, 648));
        getContentPane().setLayout(null);

        Layers.setMaximumSize(new java.awt.Dimension(1600, 900));
        Layers.setMinimumSize(new java.awt.Dimension(1152, 648));

        Button_Hide.setFont(new java.awt.Font("Nirmala UI", 0, 26)); // NOI18N
        Button_Hide.setForeground(new java.awt.Color(204, 204, 204));
        Button_Hide.setText("HIDE");
        Button_Hide.setToolTipText(null);
        Button_Hide.setBorder(null);
        Button_Hide.setBorderPainted(false);
        Button_Hide.setContentAreaFilled(false);
        Button_Hide.setFocusPainted(false);
        Button_Hide.setFocusable(false);
        Button_Hide.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_Hide.setRequestFocusEnabled(false);
        Button_Hide.setVerifyInputWhenFocusTarget(false);
        Button_Hide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_HideActionPerformed(evt);
            }
        });
        Default_Buttons.setLayer(Button_Hide, 2);
        Default_Buttons.add(Button_Hide);
        Button_Hide.setBounds(20, 20, 90, 40);

        Button_Exit.setFont(new java.awt.Font("Nirmala UI", 0, 26)); // NOI18N
        Button_Exit.setForeground(new java.awt.Color(204, 204, 204));
        Button_Exit.setText("EXIT");
        Button_Exit.setToolTipText(null);
        Button_Exit.setBorder(null);
        Button_Exit.setBorderPainted(false);
        Button_Exit.setContentAreaFilled(false);
        Button_Exit.setFocusPainted(false);
        Button_Exit.setFocusable(false);
        Button_Exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_Exit.setRequestFocusEnabled(false);
        Button_Exit.setVerifyInputWhenFocusTarget(false);
        Button_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_ExitActionPerformed(evt);
            }
        });
        Default_Buttons.setLayer(Button_Exit, 2);
        Default_Buttons.add(Button_Exit);
        Button_Exit.setBounds(1039, 20, 90, 40);

        Button_Continue.setBorderPainted(false);
        Button_Continue.setContentAreaFilled(false);
        Button_Continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_ContinueActionPerformed(evt);
            }
        });
        Default_Buttons.setLayer(Button_Continue, 1);
        Default_Buttons.add(Button_Continue);
        Button_Continue.setBounds(0, 0, 1152, 648);

        Layers.setLayer(Default_Buttons, 10);
        Layers.add(Default_Buttons);
        Default_Buttons.setBounds(0, 0, 1152, 648);

        NarrationArea_SP.setBorder(null);
        NarrationArea_SP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        NarrationArea_SP.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        NarrationArea_SP.setFocusable(false);
        NarrationArea_SP.setOpaque(false);
        NarrationArea_SP.setWheelScrollingEnabled(false);

        Narration_Area.setEditable(false);
        Narration_Area.setBorder(null);
        Narration_Area.setFont(new java.awt.Font("Segoe UI Variable", 0, 20)); // NOI18N
        Narration_Area.setForeground(new java.awt.Color(255, 255, 255));
        Narration_Area.setAutoscrolls(false);
        Narration_Area.setFocusable(false);
        Narration_Area.setOpaque(false);
        NarrationArea_SP.setViewportView(Narration_Area);

        Layers.setLayer(NarrationArea_SP, 9);
        Layers.add(NarrationArea_SP);
        NarrationArea_SP.setBounds(176, 289, 800, 70);

        Mask_Narration.setFocusable(false);
        Mask_Narration.setRequestFocusEnabled(false);
        Mask_Narration.setVerifyInputWhenFocusTarget(false);
        Layers.setLayer(Mask_Narration, 8);
        Layers.add(Mask_Narration);
        Mask_Narration.setBounds(0, 0, 1152, 648);

        Actor_Area.setFont(new java.awt.Font("Nirmala UI", 0, 24)); // NOI18N
        Actor_Area.setForeground(new java.awt.Color(153, 153, 153));
        Actor_Area.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Actor_Area.setText("Actor");
        Actor_Area.setToolTipText("");
        Actor_Area.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Layers.setLayer(Actor_Area, 6);
        Layers.add(Actor_Area);
        Actor_Area.setBounds(30, 558, 270, 70);

        TextArea_SP.setBorder(null);
        TextArea_SP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        TextArea_SP.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        TextArea_SP.setOpaque(false);
        TextArea_SP.setWheelScrollingEnabled(false);

        Text_Area.setEditable(false);
        Text_Area.setBackground(new java.awt.Color(0, 204, 204));
        Text_Area.setColumns(1);
        Text_Area.setFont(new java.awt.Font("Segoe UI Variable", 0, 20)); // NOI18N
        Text_Area.setForeground(new java.awt.Color(255, 255, 255));
        Text_Area.setLineWrap(true);
        Text_Area.setRows(1);
        Text_Area.setText("May I enjoy my life and practice my art, respected by all men and in all times.");
        Text_Area.setWrapStyleWord(true);
        Text_Area.setAutoscrolls(false);
        Text_Area.setBorder(null);
        Text_Area.setFocusable(false);
        Text_Area.setHighlighter(null);
        Text_Area.setOpaque(false);
        TextArea_SP.setViewportView(Text_Area);

        Layers.setLayer(TextArea_SP, 6);
        Layers.add(TextArea_SP);
        TextArea_SP.setBounds(358, 562, 600, 70);

        Masks_Default.setEnabled(false);
        Masks_Default.setPreferredSize(new java.awt.Dimension(1152, 648));

        Mask_Top.setFocusable(false);
        Mask_Top.setRequestFocusEnabled(false);
        Mask_Top.setVerifyInputWhenFocusTarget(false);
        Masks_Default.setLayer(Mask_Top, 2);
        Masks_Default.add(Mask_Top);
        Mask_Top.setBounds(0, 0, 1152, 648);

        Mask_Bottom.setFocusable(false);
        Mask_Bottom.setRequestFocusEnabled(false);
        Mask_Bottom.setVerifyInputWhenFocusTarget(false);
        Masks_Default.setLayer(Mask_Bottom, 1);
        Masks_Default.add(Mask_Bottom);
        Mask_Bottom.setBounds(0, 0, 1152, 648);

        Layers.setLayer(Masks_Default, 5);
        Layers.add(Masks_Default);
        Masks_Default.setBounds(0, 0, 1152, 648);

        Characters.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Characters.setIcon(new javax.swing.ImageIcon("D:\\Codin\\Java\\KosourOndrej_VNReader\\AK_demo\\res\\char\\dog_girl\\default.png")); // NOI18N
        Characters.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Characters.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Layers.setLayer(Characters, 3);
        Layers.add(Characters);
        Characters.setBounds(0, 0, 1152, 648);

        Background.setFocusable(false);
        Background.setPreferredSize(new java.awt.Dimension(1152, 648));
        Layers.setLayer(Background, 2);
        Layers.add(Background);
        Background.setBounds(0, 0, 1152, 648);

        BlackOrWhite.setBackground(new java.awt.Color(0, 0, 0));
        BlackOrWhite.setFocusable(false);
        BlackOrWhite.setPreferredSize(new java.awt.Dimension(1152, 648));

        javax.swing.GroupLayout BlackOrWhiteLayout = new javax.swing.GroupLayout(BlackOrWhite);
        BlackOrWhite.setLayout(BlackOrWhiteLayout);
        BlackOrWhiteLayout.setHorizontalGroup(
            BlackOrWhiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1152, Short.MAX_VALUE)
        );
        BlackOrWhiteLayout.setVerticalGroup(
            BlackOrWhiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );

        Layers.setLayer(BlackOrWhite, 1);
        Layers.add(BlackOrWhite);
        BlackOrWhite.setBounds(0, 0, 1152, 648);

        getContentPane().add(Layers);
        Layers.setBounds(0, 0, 1152, 648);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_ContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_ContinueActionPerformed
        
        if (!isOver) {
            if (!Button_Hide.isVisible()) {
                Button_Exit.setVisible(true);
                Button_Hide.setVisible(true);

                if (currentState.isDuringNarration()) {
                    NarrationArea_SP.setVisible(true);
                    Mask_Narration.setVisible(true);
                }

                Actor_Area.setVisible(true);
                TextArea_SP.setVisible(true);

                Masks_Default.setVisible(true);

            } else {
                if (currentState != null) cleanup();
                lnReader.progress();
            }
        } else {
            this.dispose();
            new MainMenu();
        }
    }//GEN-LAST:event_Button_ContinueActionPerformed

    private void Button_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_ExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_Button_ExitActionPerformed

    private void Button_HideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_HideActionPerformed
        if (currentState != null) {
            Button_Exit.setVisible(false);
            Button_Hide.setVisible(false);

            NarrationArea_SP.setVisible(false);
            Mask_Narration.setVisible(false);

            Actor_Area.setVisible(false);
            TextArea_SP.setVisible(false);

            Masks_Default.setVisible(false);
        }
    }//GEN-LAST:event_Button_HideActionPerformed

    private void initComponents_MANUALY_GOD_DAMNIT_NETBEANS(String lnDir, Book ln) {
        setLocationRelativeTo(null);
        
        TextArea_SP.getViewport().setOpaque(false);
        TextArea_SP.setViewportBorder(null);
        Text_Area.setBackground(new Color(0, 0, 0, 0));
        Text_Area.setText("Writer:   " + ln.getWriter() + "\nIllust:      " + ln.getIllust());
        
        Actor_Area.setText("");
        
        StyledDocument sDoc_NarAr = Narration_Area.getStyledDocument();
        SimpleAttributeSet centerAlign = new SimpleAttributeSet();
        StyleConstants.setAlignment(centerAlign, StyleConstants.ALIGN_CENTER);
        StyleConstants.setBackground(centerAlign, new Color(0, 0, 0, 0));
        
        try {
            sDoc_NarAr.insertString(0, ln.getTitle() + "\n" + ln.getStart().getName().substring(0, ln.getStart().getName().lastIndexOf('.')), centerAlign);
        } catch (BadLocationException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        sDoc_NarAr.setParagraphAttributes(0, sDoc_NarAr.getLength(), centerAlign, false);
        
        NarrationArea_SP.getViewport().setOpaque(false);
        NarrationArea_SP.setViewportBorder(null);
        Narration_Area.setStyledDocument(sDoc_NarAr);
        Narration_Area.setBackground(new Color(0, 0, 0, 0));
        
        Mask_Narration.setVisible(false);
        
        Characters.setIcon(new ImageIcon());
        
        initUI(lnDir);
        
        Button_Exit.setBackground(new Color(0, 0, 0, 0));
        
        Background.setVisible(false);
    }
    
    
    public void setup(State currSt) {
        
        currentState = currSt;
        
        String currentText = currentState.getText();
        
        if (!currentText.isEmpty()) {
            currentText = currentText.replace("{nickname}", currentState.getPlayerName());
            if (currentText.equalsIgnoreCase("{}")) {
                currentText = "";
                currentState.setActor("");
            }
            
            currentState.setText(currentText);
        }
        
    }
    
    public void update(State currSt) {
        
        setup(currSt);
        
        drawScene();
        
        if (currentState.isDuringNarration()) {
            Actor_Area.setText("");
            Text_Area.setText("");
            Mask_Narration.setVisible(true);
            NarrationArea_SP.setVisible(true);
            Narration_Area.setText(currentState.getText());
            
        } else {
            Mask_Narration.setVisible(false);
            Narration_Area.setText("");
            Actor_Area.setText(currentState.getActor().getName());
            Text_Area.setText(currentState.getText());
        }
        
        if (currentState.isDuringImage()) {
            Characters.setVisible(false);
            setImage();
        } else {
            Characters.setVisible(true);
            setBackground();
        }
        
        // System.out.println(currentState.getActor().getName() + ": " + currentState.getText());
        
        
    }
    
    public void cleanup() {
        
        if(currentState.isDuringNarration()) currentState.setDuringNarration(false);
    }
    
    public void end(Book ln) {
        isOver = true;
        
        Actor_Area.setText("");
        Text_Area.setText("The End");
        Mask_Narration.setVisible(true);
        NarrationArea_SP.setVisible(true);
        Narration_Area.setText(ln.getTitle() + "\n" + ln.getStart().getName().substring(0, ln.getStart().getName().lastIndexOf('.')));
    }
    
    
    private void initUI(String lnPath) {        // DO ALL
        
        try {
            BufferedImage textMaskBottomOrig = ImageIO.read(new File(lnPath + "\\res\\ui\\Mask_Bottom.png"));
            BufferedImage textMaskTopOrig = ImageIO.read(new File(lnPath + "\\res\\ui\\Mask_Top.png"));
            BufferedImage narrationMaskOrig = ImageIO.read(new File(lnPath + "\\res\\ui\\Mask_Narration.png"));
            
            Mask_Bottom.setIcon(new ImageIcon(scaleImage(textMaskBottomOrig, Mask_Bottom.getWidth(), Mask_Bottom.getHeight())));
            Mask_Top.setIcon(new ImageIcon(scaleImage(textMaskTopOrig, Mask_Top.getWidth(), Mask_Top.getHeight())));
            Mask_Narration.setIcon(new ImageIcon(scaleImage(narrationMaskOrig, Mask_Narration.getWidth(), Mask_Narration.getHeight())));
        
        } catch (IOException ex) {
            System.out.println("ERROR: UI elements not found");
        }
        
        
        
    }
    
    /**
     * Vykreslí postavy
     */
    private void drawScene() {
        
        var canvas = new BufferedImage(Characters.getWidth(), Characters.getHeight(), BufferedImage.TYPE_INT_ARGB);
        
        Graphics2D g2D = canvas.createGraphics();
        g2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        
        int sceneLen = 1;
        Chara actr = currentState.getActor();
        int actorIndex = 0;
        
        
        if (!currentState.isDuringSolo()) {
            sceneLen = currentState.getSceneLength();
            actorIndex = -1;
            if (sceneLen > 0) {
                for (int i = 0; i < sceneLen; i++) {
                    if (currentState.getSceneChar(i).equals(actr)) {
                        actorIndex = i;

                    } else {
                        try {
                            var sprite = ImageIO.read(new File(currentState.getLnDir() + "\\res\\char\\" + currentState.getSceneChar(i).getDefSprite()));

                            int height = (int) (Characters.getHeight() * 1.3425);
                            int width = scaleDimensionsKeepRatio(sprite.getWidth(), sprite.getHeight(), -1, height);

                            int x = (Characters.getWidth() / (sceneLen + 1) * (i + 1)) - (width / 2);

                            g2D.drawImage(sprite, x, 30, width, height, null);

                        } catch (IOException ex) {
                            System.out.println("ERROR: Sprite not found: " + currentState.getLnDir() + "\\res\\char\\" + currentState.getSceneChar(i).getDefSprite());
                        }
                    }
                }
            }
        }

        if (actr.getDefSprite().isBlank()) actorIndex = -1;
        if (actorIndex >= 0) {
            try {
                var sprite = ImageIO.read(new File(currentState.getLnDir() + "\\res\\char\\" + actr.getDefSprite()));

                int height = (int) (Characters.getHeight() * 1.3425);
                int width = scaleDimensionsKeepRatio(sprite.getWidth(), sprite.getHeight(), -1, height);

                int x = (Characters.getWidth() / (sceneLen + 1) * (actorIndex + 1)) - (width / 2);

                g2D.drawImage(sprite, x, 20, width, height, null);

            } catch (IOException ex) {
                System.out.println("ERROR: Actor sprite not found: " + currentState.getLnDir() + "\\res\\char\\" + actr.getDefSprite());
            }
        }
        
        
        g2D.dispose();
        
        Characters.setIcon(new ImageIcon(canvas));
    }
    
    /**
     * Nastaví na pozadí správně nadimenzovaný obrázek
     */
    private void setBackground() {
        
        String bckg = currentState.getBackground().substring(currentState.getBackground().lastIndexOf("\\") + 1);
        
        javax.swing.ImageIcon lastBg;
        lastBg = (ImageIcon) Background.getIcon();
        
        if ((lastBg == null) || !Background.isVisible()) {
            if (BlackOrWhite.getBackground().equals(Color.BLACK) && bckg.equalsIgnoreCase("black"))
                return;
            else if (BlackOrWhite.getBackground().equals(Color.WHITE) && bckg.equalsIgnoreCase("white"))
                return;
        }
        
        if (lastBg != null)
            if (bckg.equals(lastBckg))
                return;
        
        try {

            System.out.println("Setting background: " + bckg);

            if (bckg.equalsIgnoreCase("black") || bckg.equalsIgnoreCase("white")) {
                if (bckg.equalsIgnoreCase("black"))
                    BlackOrWhite.setBackground(Color.BLACK);
                else
                    BlackOrWhite.setBackground(Color.WHITE);

                Background.setVisible(false);

            } else if (bckg.isBlank()) {
                BlackOrWhite.setBackground(Color.BLACK);
                Background.setVisible(false);

            } else {
                
                BufferedImage origBckg = ImageIO.read(new File(currentState.getBackground()));
                Background.setIcon(new ImageIcon(scaleImage(origBckg, Background.getWidth(), Background.getHeight())));
                Background.setVisible(true);
                
            }
            
            lastBckg = bckg;

        } catch (IOException ex) {
            System.out.println("ERROR: Image not found: " + currentState.getBackground());
        }
    }
    
    private void setImage() {
        
        String img = currentState.getImage().substring(currentState.getImage().lastIndexOf("\\") + 1);
        
        javax.swing.ImageIcon lastBg;
        lastBg = (ImageIcon) Background.getIcon();
        
        if ((lastBg == null) || !Background.isVisible()) {
            if (BlackOrWhite.getBackground().equals(Color.BLACK) && img.equalsIgnoreCase("black"))
                return;
            else if (BlackOrWhite.getBackground().equals(Color.WHITE) && img.equalsIgnoreCase("white"))
                return;
        }
        
        if (lastBg != null)
            if (img.equals(lastBckg))
                return;
        
        try {

            System.out.println("Setting image: " + img);

            if (img.equalsIgnoreCase("black") || img.equalsIgnoreCase("white")) {
                if (img.equalsIgnoreCase("black"))
                    BlackOrWhite.setBackground(Color.BLACK);
                else
                    BlackOrWhite.setBackground(Color.WHITE);

                Background.setVisible(false);

            } else if (img.isBlank()) {
                BlackOrWhite.setBackground(Color.BLACK);
                Background.setVisible(false);

            } else {
                
                BufferedImage origImg = ImageIO.read(new File(currentState.getImage()));
                Background.setIcon(new ImageIcon(scaleImage(origImg, Background.getWidth(), Background.getHeight())));
                Background.setVisible(true);
                
            }
            
            lastBckg = img;

        } catch (IOException ex) {
            System.out.println("ERROR: Image not found: " + currentState.getImage());
        }
    }
    
    private int scaleDimensionsKeepRatio (int sourceW, int sourceH, int outputW, int outputH) {
        
        if (sourceW <= 0 || sourceH <= 0 || (outputW <= 0 && outputH <= 0)) return -1;
        
        int ratio = sourceW / sourceH;
        
        if (outputH == -1)
            return outputW / ratio;
        
        if (outputW == -1)
            return outputH * ratio;
        
        return -1;
    }
    
    private BufferedImage scaleImage (BufferedImage source, int width, int height) {
        
        var scaled = new BufferedImage(width, height, source.getType());
        Graphics2D g2D = scaled.createGraphics();
        g2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        
        g2D.drawImage(source, 0, 0, width, height, null);
        g2D.dispose();
        
        return scaled;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Actor_Area;
    private javax.swing.JLabel Background;
    private javax.swing.JPanel BlackOrWhite;
    private javax.swing.JButton Button_Continue;
    private javax.swing.JToggleButton Button_Exit;
    private javax.swing.JToggleButton Button_Hide;
    private javax.swing.JLabel Characters;
    private javax.swing.JLayeredPane Default_Buttons;
    private javax.swing.JLayeredPane Layers;
    private javax.swing.JLabel Mask_Bottom;
    private javax.swing.JLabel Mask_Narration;
    private javax.swing.JLabel Mask_Top;
    private javax.swing.JLayeredPane Masks_Default;
    private javax.swing.JScrollPane NarrationArea_SP;
    private javax.swing.JTextPane Narration_Area;
    private javax.swing.JScrollPane TextArea_SP;
    private javax.swing.JTextArea Text_Area;
    // End of variables declaration//GEN-END:variables

}
